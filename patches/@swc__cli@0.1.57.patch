diff --git a/lib/swc/dir.js b/lib/swc/dir.js
index b3c76c6943639e5865c7591e20850846e02be758..616edb0e4add13f023480795a79daacc21de0450 100644
--- a/lib/swc/dir.js
+++ b/lib/swc/dir.js
@@ -48,8 +48,8 @@ function getDest(filename, outDir, ext) {
     }
     return (0, _path).join(outDir, base);
 }
-async function handleCompile(filename, outDir, sync, swcOptions) {
-    const dest = getDest(filename, outDir, ".js");
+async function handleCompile(filename, outDir, sync, swcOptions, outputFileExtension) {
+    const dest = getDest(filename, outDir, outputFileExtension ?? ".js");
     const sourceFileName = (0, _slash).default((0, _path).relative((0, _path).dirname(dest), filename));
     const options = {
         ...swcOptions,
@@ -88,7 +88,7 @@ async function initialCompilation(cliOptions, swcOptions) {
     if (sync) {
         for (const filename of compilable){
             try {
-                const result = await handleCompile(filename, outDir, sync, swcOptions);
+                const result = await handleCompile(filename, outDir, sync, swcOptions, cliOptions.outputFileExtension);
                 results.set(filename, result);
             } catch (err) {
                 console.error(err.message);
@@ -106,7 +106,7 @@ async function initialCompilation(cliOptions, swcOptions) {
         }
     } else {
         await Promise.all([
-            Promise.allSettled(compilable.map((file)=>handleCompile(file, outDir, sync, swcOptions).catch((err)=>{
+            Promise.allSettled(compilable.map((file)=>handleCompile(file, outDir, sync, swcOptions, cliOptions.outputFileExtension).catch((err)=>{
                     console.error(err.message);
                     throw err;
                 })
@@ -184,7 +184,7 @@ async function watchCompilation(cliOptions, swcOptions) {
     watcher.on("unlink", async (filename)=>{
         try {
             if ((0, _sources).isCompilableExtension(filename, extensions)) {
-                await unlink(getDest(filename, outDir, ".js"));
+                await unlink(getDest(filename, outDir, cliOptions.outputFileExtension ?? ".js"));
             } else if (copyFiles) {
                 await unlink(getDest(filename, outDir));
             }
@@ -202,7 +202,7 @@ async function watchCompilation(cliOptions, swcOptions) {
             if ((0, _sources).isCompilableExtension(filename, extensions)) {
                 try {
                     const start = process.hrtime();
-                    const result = await handleCompile(filename, outDir, sync, swcOptions);
+                    const result = await handleCompile(filename, outDir, sync, swcOptions, cliOptions.outputFileExtension);
                     if (!quiet && result === _constants.CompileStatus.Compiled) {
                         const end = process.hrtime(start);
                         console.log(`Successfully compiled ${filename} with swc (%dms)`, (end[1] / 1000000).toFixed(2));
diff --git a/lib/swc/options.js b/lib/swc/options.js
index 0f586a612ec9bbaadaff2de7301a6dff98dc47ed..12c3a41a8825523cb696611c816fe1188a37343b 100644
--- a/lib/swc/options.js
+++ b/lib/swc/options.js
@@ -88,7 +88,8 @@ function parserArgs(args) {
         copyFiles: !!opts.copyFiles,
         includeDotfiles: !!opts.includeDotfiles,
         deleteDirOnStart: Boolean(opts.deleteDirOnStart),
-        quiet: !!opts.quiet
+        quiet: !!opts.quiet,
+        outputFileExtension: opts.outputFileExtension,
     };
     return {
         swcOptions,
@@ -128,6 +129,7 @@ const initProgram = ()=>{
     program.option("--sync", "Invoke swc synchronously. Useful for debugging.", collect);
     program.option("--log-watch-compilation", "Log a message when a watched file is successfully compiled", true);
     program.option("--extensions [list]", "Use specific extensions", collect);
+    program.option("--output-file-extension [string]", "Use specific extensions for output files", ".js");
     program.version(`
 @swc/cli: ${pkg.version}
 @swc/core: ${_core.version}